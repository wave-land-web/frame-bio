---
import TitleHorizontal from '../../assets/images/frame-bio_title-horizontal.svg'
import TitleVertical from '../../assets/images/frame-bio_title-vertical.svg'
import ToTop from '../../assets/images/to-top.svg'
import Email from '../../assets/images/email.svg'
import Phone from '../../assets/images/phone.svg'
---

<header>
  <h1 class="sr-only">Frame Bio</h1>

  <!-- Desktop Logo - Separate from nav for independent z-index control -->
  <a href="/" class="hidden md:block">
    <TitleVertical class="fixed left-(--site-padding-base) top-(--site-padding-6xl) w-16 z-1" />
  </a>

  <nav
    id="main-nav"
    class="fixed w-full md:w-fit group md:top-(--site-padding-base) pt-(--site-padding-md) md:right-(--site-padding-lg) py-(--site-padding-base) md:py-(--site-padding-sm) z-3 transition-all duration-300 ease-in-out max-md:bg-gradient-to-b from-primary to-transparent"
    aria-label="Primary navigation"
  >
    <!-- Nav items -->
    <div
      id="nav-items"
      class="w-full relative px-(--site-padding-base) flex items-start justify-between gap-4"
    >
      <!-- Mobile Logo -->
      <a href="/" class="block md:hidden">
        <TitleHorizontal id="mobile-logo" />
      </a>

      <!-- Icons column -->
      <ul
        id="nav-icons"
        class="z-100 flex flex-col items-end gap-4 pt-(--site-padding-sm) md:[.nav-open_&]:px-0 transition-all duration-300 md:text-secondary text-primary [.nav-open_&]:text-primary"
      >
        <li>
          <button
            type="button"
            aria-label="Menu"
            aria-controls="nav-modal"
            aria-expanded="false"
            id="menu-btn"
            class="relative p-0 m-0 w-6 h-6"
          >
            <!-- Hamburger lines that stretch to the left when open -->
            <div class="absolute top-0 right-0 flex flex-col gap-1.5">
              <span
                class="hamburger-line block h-0.5 bg-secondary transition-width duration-300 w-6 origin-[right_center]"
              ></span>
              <span
                class="hamburger-line block h-0.5 bg-secondary transition-width duration-300 delay-75 w-6 origin-[right_center]"
              ></span>
              <span
                class="hamburger-line block h-0.5 bg-secondary transition-width duration-300 delay-150 w-6 origin-[right_center]"
              ></span>
            </div>
          </button>
        </li>
        <li
          class="opacity-0 invisible -z-1 group-[&.nav-open]:visible group-[&.nav-open]:opacity-100 group-[&.nav-open]:z-100 md:visible md:opacity-100 md:z-100 transition-all duration-300"
        >
          <a href="tel:+1234567890" aria-label="Call">
            <Phone class="size-6" />
          </a>
        </li>
        <li
          class="opacity-0 invisible -z-1 group-[&.nav-open]:visible group-[&.nav-open]:opacity-100 group-[&.nav-open]:z-100 md:visible md:opacity-100 md:z-100 transition-all duration-300"
        >
          <a href="mailto:info@example.com" aria-label="Email">
            <Email class="size-6" />
          </a>
        </li>
        <li
          class="opacity-0 invisible -z-1 group-[&.nav-open]:visible group-[&.nav-open]:opacity-100 group-[&.nav-open]:z-100 md:visible md:opacity-100 md:z-100 transition-all duration-300"
        >
          <a href="#top" aria-label="Back to Top">
            <ToTop class="size-6" />
          </a>
        </li>
      </ul>
    </div>

    <!-- Modal panel -->
    <div
      id="nav-modal"
      role="dialog"
      aria-modal="true"
      aria-label="Site menu"
      class="absolute top-0 right-0 pointer-events-none opacity-0 translate-y-2 transition-all duration-300 w-xs bg-primary-content text-primary shadow-xl px-(--site-padding-base) pt-(--site-padding-2xl) md:pt-(--site-padding-xl) pb-(--site-padding-md) [&.modal-open]:opacity-100 [&.modal-open]:translate-y-0 [&.modal-open]:pointer-events-auto z-50"
    >
      <!-- Menu links -->
      <ul class="flex flex-col gap-5 font-bold uppercase tracking-tight">
        <li>
          <a href="#about">About</a>
        </li>
        <li>
          <a href="#our-tech">Our Tech</a>
        </li>
        <li>
          <a href="#products">Products</a>
        </li>
        <li>
          <a href="#pipeline">Pipeline</a>
        </li>
        <li>
          <a href="#contact">Contact</a>
        </li>
      </ul>
    </div>
  </nav>
</header>

<script>
  const root = document.getElementById('main-nav') as HTMLElement | null
  const hamburger = document.getElementById('menu-btn') as HTMLButtonElement | null
  const icons = document.getElementById('nav-icons') as HTMLElement | null
  const modal = document.getElementById('nav-modal') as HTMLElement | null
  const mainNav = document.getElementById('main-nav') as HTMLElement | null
  const stretches = document.querySelectorAll('.hamburger-line') as NodeListOf<HTMLElement>

  // Scroll state
  let lastScrollY = 0
  let isScrollingDown = false

  // State helpers
  const getIsOpen = (): boolean => root?.classList.contains('nav-open') || false

  // Calculate hamburger stretch width based on current viewport
  const calculateStretchWidth = (): number => {
    if (!hamburger || !modal) return 16

    const btnRect = hamburger.getBoundingClientRect()
    const modalRect = modal.getBoundingClientRect()
    const computedStyle = getComputedStyle(modal)
    const leftPadding = parseFloat(computedStyle.paddingLeft)

    return btnRect.right - (modalRect.left + leftPadding)
  }

  // Update hamburger line widths
  const updateHamburgerLines = (open: boolean) => {
    if (open) {
      const targetWidth = calculateStretchWidth()
      stretches.forEach((el: HTMLElement) => {
        el.style.width = `${targetWidth}px`
        el.style.transform = 'translateX(0)'
      })
    } else {
      stretches.forEach((el: HTMLElement) => {
        el.style.width = '24px'
        el.style.transform = 'translateX(0)'
      })
    }
  }

  const setState = (open: boolean) => {
    if (!root || !icons || !modal || !hamburger) return

    if (open) {
      root.classList.add('nav-open')
      modal.classList.add('modal-open')
    } else {
      root.classList.remove('nav-open')
      modal.classList.remove('modal-open')
    }

    hamburger.setAttribute('aria-expanded', open ? 'true' : 'false')
    updateHamburgerLines(open)
  }

  // Handle scroll for mobile logo
  const handleScroll = () => {
    if (!mainNav || !root) return

    if (window.innerWidth >= 768) return

    const currentScrollY = window.scrollY
    const scrollThreshold = 50

    // Determine scroll direction
    const scrollingDown = currentScrollY > lastScrollY && currentScrollY > scrollThreshold

    // Only update if direction changed to avoid excessive DOM manipulation
    if (scrollingDown !== isScrollingDown) {
      isScrollingDown = scrollingDown

      if (scrollingDown) {
        // Hide logo, move nav to top
        mainNav.style.transform = 'translateY(-130%)'
      } else {
        // Show logo, restore nav position
        mainNav.style.transform = 'translateY(0)'
      }
    }

    lastScrollY = currentScrollY
  }

  // Make sure nav is visible on desktop
  const handleResize = () => {
    if (!mainNav) return

    if (window.innerWidth >= 768) {
      mainNav.style.transform = 'translateY(0)'
    }
  }

  const closeNav = () => setState(false)
  const toggleNav = () => setState(!getIsOpen())

  // Event handlers
  const handleMenuButtonClick = (e: Event) => {
    e.preventDefault()
    toggleNav()
  }

  const handleKeydown = (e: KeyboardEvent) => {
    if (e.key === 'Escape') closeNav()
  }

  const handleDocumentClick = (e: MouseEvent) => {
    if (!root || !modal) return
    if (!getIsOpen()) return
    const target = e.target as Node
    if (!modal.contains(target) && !root.contains(target)) {
      closeNav()
    }
  }

  const handleModalClick = (e: MouseEvent) => {
    const target = e.target as HTMLElement
    if (target && target.closest('a')) closeNav()
  }

  const handleIconsClick = (e: MouseEvent) => {
    const target = e.target as HTMLElement
    // Close menu if any icon link is clicked (but not the hamburger button)
    if (target && target.closest('a') && !target.closest('#menu-btn')) {
      closeNav()
    }
  }

  // Throttle scroll handler for performance
  let scrollTimeout: number | null = null
  const throttledScroll = () => {
    if (scrollTimeout) return
    scrollTimeout = requestAnimationFrame(() => {
      handleScroll()
      scrollTimeout = null
    })
  }

  // Init
  const init = () => {
    setState(false)
    hamburger?.addEventListener('click', handleMenuButtonClick)
    window.addEventListener('keydown', handleKeydown)
    window.addEventListener('scroll', throttledScroll, { passive: true })
    document.addEventListener('click', handleDocumentClick)
    modal?.addEventListener('click', handleModalClick)
    icons?.addEventListener('click', handleIconsClick)
    window.addEventListener('resize', handleResize)
  }

  init()
</script>
